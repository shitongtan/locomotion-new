Index: app/src/main/java/com/example/lezh1k/sensordatacollector/MainActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/lezh1k/sensordatacollector/MainActivity.java	(date 1585027013856)
+++ app/src/main/java/com/example/lezh1k/sensordatacollector/MainActivity.java	(date 1585027013856)
@@ -13,10 +13,12 @@
 import android.content.SharedPreferences;
 import android.content.pm.PackageManager;
 import android.content.res.ColorStateList;
+import android.graphics.Color;
 import android.hardware.SensorManager;
 import android.location.Location;
 import android.location.LocationManager;
 import android.os.AsyncTask;
+import android.os.Build;
 import android.os.Bundle;
 import android.os.Environment;
 import android.os.Handler;
@@ -46,10 +48,17 @@
 
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
+import androidx.annotation.RequiresApi;
 import androidx.appcompat.app.AppCompatActivity;
 import androidx.core.app.ActivityCompat;
 import androidx.core.content.ContextCompat;
 
+
+//mapmatching
+import com.mapbox.mapboxsdk.maps.Style;
+import com.mapbox.mapboxsdk.style.layers.LineLayer;
+import com.mapbox.mapboxsdk.style.sources.GeoJsonSource;
+
 import com.elvishew.xlog.LogLevel;
 import com.elvishew.xlog.XLog;
 import com.elvishew.xlog.printer.AndroidPrinter;
@@ -64,36 +73,69 @@
 import mad.location.manager.lib.SensorAux.SensorCalibrator;
 import mad.location.manager.lib.Services.KalmanLocationService;
 import mad.location.manager.lib.Services.ServicesHelper;
+import retrofit2.Call;
+import retrofit2.Callback;
+import retrofit2.Response;
+import timber.log.Timber;
+
 import com.example.lezh1k.sensordatacollector.Interfaces.MapInterface;
 import com.example.lezh1k.sensordatacollector.Presenters.MapPresenter;
+import com.mapbox.android.core.location.LocationEngine;
+//import com.mapbox.android.core.location.LocationEngineListener;
+import com.mapbox.android.core.permissions.PermissionsListener;
+import com.mapbox.android.core.permissions.PermissionsManager;
+import com.mapbox.api.matching.v5.MapboxMapMatching;
+import com.mapbox.api.matching.v5.models.MapMatchingMatching;
+import com.mapbox.api.matching.v5.models.MapMatchingResponse;
+import com.mapbox.core.exceptions.ServicesException;
+import com.mapbox.geojson.Feature;
+import com.mapbox.geojson.FeatureCollection;
+import com.mapbox.geojson.LineString;
+import com.mapbox.geojson.Point;
 import com.mapbox.mapboxsdk.Mapbox;
 import com.mapbox.mapboxsdk.annotations.Polyline;
 import com.mapbox.mapboxsdk.annotations.PolylineOptions;
 import com.mapbox.mapboxsdk.camera.CameraPosition;
 import com.mapbox.mapboxsdk.camera.CameraUpdateFactory;
-import com.mapbox.mapboxsdk.constants.Style;
+//import com.mapbox.mapboxsdk.constants.Style;
 import com.mapbox.mapboxsdk.geometry.LatLng;
 import com.mapbox.mapboxsdk.maps.MapView;
 import com.mapbox.mapboxsdk.maps.MapboxMap;
 
 import java.io.File;
+import java.io.InputStream;
+import java.lang.ref.WeakReference;
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Locale;
+import java.util.Objects;
+import java.util.Scanner;
 import java.util.Set;
 import java.util.TimeZone;
 
 import com.example.lezh1k.sensordatacollector.SensorService.LocalBinder;
+import com.mapbox.mapboxsdk.maps.OnMapReadyCallback;
+import com.mapbox.mapboxsdk.plugins.locationlayer.LocationLayerPlugin;
+import com.mapbox.mapboxsdk.style.layers.LineLayer;
+import com.mapbox.mapboxsdk.style.sources.GeoJsonSource;
+import com.mapbox.mapboxsdk.utils.ColorUtils;
+
 import static com.example.lezh1k.sensordatacollector.Constants.*;
+import static com.mapbox.api.isochrone.IsochroneCriteria.PROFILE_DRIVING;
+import static com.mapbox.core.constants.Constants.PRECISION_6;
+import static com.mapbox.mapboxsdk.style.layers.PropertyFactory.lineColor;
+import static com.mapbox.mapboxsdk.style.layers.PropertyFactory.lineOpacity;
+import static com.mapbox.mapboxsdk.style.layers.PropertyFactory.lineWidth;
 
-public class MainActivity extends AppCompatActivity implements LocationServiceInterface, MapInterface, ILogger {
+public class MainActivity extends AppCompatActivity implements OnMapReadyCallback, PermissionsListener, LocationServiceInterface, MapInterface, ILogger {
+
 
     private SharedPreferences mSharedPref;
-
     private String xLogFolderPath;
     private static SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd", Locale.US);
 
+
     class ChangableFileNameGenerator implements FileNameGenerator {
         private String fileName;
 
@@ -114,9 +156,7 @@
             return fileName;
         }
     }
-
     ChangableFileNameGenerator xLogFileNameGenerator = new ChangableFileNameGenerator();
-
     public void initXlogPrintersFileName() {
         sdf.setTimeZone(TimeZone.getDefault());
         String dateStr = sdf.format(System.currentTimeMillis());
@@ -130,13 +170,11 @@
         }
         xLogFileNameGenerator.setFileName(fileName);
     }
-
     @Override
     public void log2file(String format, Object... args) {
         XLog.i(format, args);
     }
 
-
     class RefreshTask extends AsyncTask {
         boolean needTerminate = false;
         long deltaT;
@@ -200,6 +238,10 @@
     private MapPresenter m_presenter;
     private MapboxMap m_map;
     private MapView m_mapView;
+    private PermissionsManager permissionsManager;
+    private LocationEngine locationEngine;
+    private LocationLayerPlugin locationLayerPlugin;
+    private Location originLocation;
 
     private GeohashRTFilter m_geoHashRTFilter;
     private SensorCalibrator m_sensorCalibrator = null;
@@ -207,6 +249,8 @@
     private boolean m_isCalibrating = false;
     private RefreshTask m_refreshTask = new RefreshTask(1000l, this);
 
+
+
     @Override
     public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
         super.onRequestPermissionsResult(requestCode, permissions, grantResults);
@@ -326,20 +370,6 @@
         m_isCalibrating = isCalibrating;
     }
 
-
-//    public void btnStartStopTracking_click(View v) {
-//        set_isLogging(!m_isLogging); //clear
-//        int a = 14;
-//        Log.d("tracking", String.valueOf(a));
-//        set_isCalibrating(!m_isCalibrating, true);
-//        startLogger();
-//
-//    }
-//
-//    public void btnCalibrateSensors_click(View v) {
-//        set_isCalibrating(!m_isCalibrating, true);
-//    }
-
     private void initActivity() {
 
         String[] interestedPermissions;
@@ -400,13 +430,15 @@
         }
     };
 
+
+
     @Override
     public void locationChanged(Location location) {
         if (m_map != null && m_presenter != null) {
-            if (!m_map.isMyLocationEnabled()) {
-                m_map.setMyLocationEnabled(true);
-                m_map.getMyLocationViewSettings().setForegroundTintColor(ContextCompat.getColor(this, R.color.red));
-            }
+//            if (!m_map.isMyLocationEnabled()) {
+//                m_map.setMyLocationEnabled(true);
+//                m_map.getMyLocationViewSettings().setForegroundTintColor(ContextCompat.getColor(this, R.color.red));
+//            }
 
             m_presenter.locationChanged(location, m_map.getCameraPosition());
         }
@@ -471,40 +503,188 @@
         }
     }
 
+
+    @Override
+    public void onMapReady(@NonNull MapboxMap mapboxMap) {
+
+    }
     public void setupMap(@Nullable Bundle savedInstanceState) {
         m_mapView = (MapView) findViewById(R.id.mapView);
         m_mapView.onCreate(savedInstanceState);
 
         m_presenter = new MapPresenter(this, this, m_geoHashRTFilter);
         m_mapView.getMapAsync(mapboxMap -> {
-            m_map = mapboxMap;
             MainActivity this_ = this;
-            ProgressDialog progress = new ProgressDialog(this);
-            progress.setTitle("Loading");
-            progress.setMessage("Wait while map loading...");
-            progress.setCancelable(false); // disable dismiss by tapping outside of the dialog
-            progress.show();
+            m_map = mapboxMap;
+
 
-            m_map.setStyleUrl(BuildConfig.lightMapStyle);
-            m_map.setStyleUrl(Style.SATELLITE_STREETS, new MapboxMap.OnStyleLoadedListener() {
-                @Override
-                public void onStyleLoaded(String style) {
-                    m_map.getUiSettings().setLogoEnabled(false);
-                    m_map.getUiSettings().setAttributionEnabled(false);
-                    m_map.getUiSettings().setTiltGesturesEnabled(false);
-
-                    int leftMargin = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 16, getResources().getDisplayMetrics());
-                    int topMargin = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 56, getResources().getDisplayMetrics());
-                    int rightMargin = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 16, getResources().getDisplayMetrics());
-                    int bottomMargin = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 16, getResources().getDisplayMetrics());
-                    m_map.getUiSettings().setCompassMargins(leftMargin, topMargin, rightMargin, bottomMargin);
-                    ServicesHelper.addLocationServiceInterface(this_);
-                    m_presenter.getRoute();
-                    progress.dismiss();
+            //                ProgressDialog progress = new ProgressDialog(this);
+//                progress.setTitle("Loading");
+//                progress.setMessage("Wait while map loading...");
+//                progress.setCancelable(false); // disable dismiss by tapping outside of the dialog
+//                progress.show();
+                m_map.setStyle(Style.MAPBOX_STREETS);
+
+                m_map.setStyle(Style.SATELLITE_STREETS, new Style.OnStyleLoaded() {
+                    @Override
+                    public void onStyleLoaded(@NonNull Style style) {
+                        m_map.getUiSettings().setLogoEnabled(false);
+                        m_map.getUiSettings().setAttributionEnabled(false);
+                        m_map.getUiSettings().setTiltGesturesEnabled(false);
+                        int leftMargin = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 16, getResources().getDisplayMetrics());
+                        int topMargin = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 56, getResources().getDisplayMetrics());
+                        int rightMargin = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 16, getResources().getDisplayMetrics());
+                        int bottomMargin = (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, 16, getResources().getDisplayMetrics());
+                        m_map.getUiSettings().setCompassMargins(leftMargin, topMargin, rightMargin, bottomMargin);
+                        ServicesHelper.addLocationServiceInterface(this_);
+
+                        m_presenter.getRoute();
+
+//                        progress.dismiss();
+//                        ServicesHelper.addLocationServiceInterface((LocationServiceInterface) this_);
+
+                        new LoadGeoJson(MainActivity.this).execute();
+                    }
+
+                });
+
+        });
+    }
+
+
+    //Mapmatching
+
+
+
+
+    @Override
+    public void onExplanationNeeded(List<String> permissionsToExplain) {
+
+    }
+
+    @Override
+    public void onPermissionResult(boolean granted) {
+
+    }
+
+    private static class LoadGeoJson extends AsyncTask<Void, Void, FeatureCollection> {
+
+        private WeakReference<MainActivity> weakReference;
+
+        LoadGeoJson(MainActivity activity) {
+            this.weakReference = new WeakReference<>(activity);
+        }
+
+        static String convertStreamToString(InputStream is) {
+            Scanner scanner = new Scanner(is).useDelimiter("\\A");
+            return scanner.hasNext() ? scanner.next() : "";
+        }
+
+        @Override
+        protected FeatureCollection doInBackground(Void... voids) {
+
+            try {
+                MainActivity activity = weakReference.get();
+                if (activity != null) {
+                    InputStream inputStream = activity.getAssets().open("trace.geojson");
+                    Log.d("streaming", String.valueOf(inputStream));
+                    int a = 10;
+                    Log.d("background", String.valueOf(a));
+
+                    return FeatureCollection.fromJson(convertStreamToString(inputStream));
+
+                }
+            } catch (Exception exception) {
+                int a = 12;
+                Log.d("bounce", String.valueOf(exception));
+                Timber.e("Exception Loading GeoJSON: %s", exception.toString());
+            }
+            return null;
+        }
+
+        @Override
+        protected void onPostExecute(@Nullable FeatureCollection featureCollection) {
+            super.onPostExecute(featureCollection);
+            MainActivity activity = weakReference.get();
+            if (activity != null && featureCollection != null) {
+                activity.drawLines(featureCollection);
+            }
+        }
+    }
+
+    @RequiresApi(api = Build.VERSION_CODES.KITKAT)
+    private void drawMapMatched(@NonNull List<MapMatchingMatching> matchings) {
+        Style style =m_map.getStyle();
+        if (style != null && !matchings.isEmpty()) {
+            style.addSource(new GeoJsonSource("matched-source-id", Feature.fromGeometry(LineString.fromPolyline(
+                    Objects.requireNonNull(matchings.get(0).geometry()), PRECISION_6)))
+            );
+            style.addLayer(new LineLayer("matched-layer-id", "matched-source-id")
+                    .withProperties(
+                            lineColor(ColorUtils.colorToRgbaString(Color.parseColor("#3bb2d0"))),
+                            lineWidth(6f))
+            );
+        }
+    }
+
+    @RequiresApi(api = Build.VERSION_CODES.KITKAT)
+    private void requestMapMatched(Feature feature) {
+        List<Point> points = ((LineString) Objects.requireNonNull(feature.geometry())).coordinates();
+
+        try {
+            // Setup the request using a client.
+            MapboxMapMatching client = MapboxMapMatching.builder()
+                    .accessToken(Objects.requireNonNull(Mapbox.getAccessToken()))
+                    .profile(PROFILE_DRIVING)
+                    .coordinates(points)
+                    .build();
+
+            // Execute the API call and handle the response.
+            client.enqueueCall(new Callback<MapMatchingResponse>() {
+                @Override
+                public void onResponse(@NonNull Call<MapMatchingResponse> call,
+                                       @NonNull Response<MapMatchingResponse> response) {
+                    if (response.code() == 200) {
+                        drawMapMatched(Objects.requireNonNull(response.body()).matchings());
+                    } else {
+                        // If the response code does not response "OK" an error has occurred.
+                        Timber.e("MapboxMapMatching failed with %s", response.code());
+                    }
+                }
+
+                @Override
+                public void onFailure(Call<MapMatchingResponse> call, Throwable throwable) {
+                    Timber.e(throwable, "MapboxMapMatching error");
                 }
             });
+        } catch (ServicesException servicesException) {
+            Timber.e(servicesException, "MapboxMapMatching error");
+        }
+    }
+
+    private void drawBeforeMapMatching(Feature feature) {
+        m_map.getStyle(style -> {
+            style.addSource(new GeoJsonSource("pre-matched-source-id", feature));
+            style.addLayer(new LineLayer("pre-matched-layer-id", "pre-matched-source-id").withProperties(
+                    lineColor(ColorUtils.colorToRgbaString(Color.parseColor("#c14a00"))),
+                    lineWidth(6f),
+                    lineOpacity(1f)
+            ));
         });
     }
+
+    private void drawLines(@NonNull FeatureCollection featureCollection) {
+        List<Feature> features = featureCollection.features();
+        if (features != null && features.size() > 0) {
+            Feature feature = features.get(0);
+            drawBeforeMapMatching(feature);
+            requestMapMatched(feature);
+        }
+    }
+
+
+
+
 
 
     private TextView mStatusText, mHeightText, mStepText, mHeightaccText, mStepDailyText, mHeightDailyText, movementOfUser, levelOfUser;
@@ -900,16 +1080,6 @@
 //        else mStatusText.setText(R.string.sensor_register_failed); //Reregistering when already running will give an error, too!
     }
 
-
-
-
-//        Log.d("succesful", String.valueOf(succ));
-//        if (succ && mSettings.getBoolean(cPREF_DEBUG, false))
-//            Toast.makeText(MainActivity.this, R.string.debug_listener_started, Toast.LENGTH_SHORT).show();
-//        else
-//            mStatusText.setText(R.string.sensor_register_failed); //Reregistering when already running will give an error, too!
-//    }
-
     // action for stop button: stopping measurement
     private void stopLogger() {
         /*
Index: app/src/main/assets/trace.geojson
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/assets/trace.geojson	(date 1585025077624)
+++ app/src/main/assets/trace.geojson	(date 1585025077624)
@@ -0,0 +1,21 @@
+{
+    "type": "FeatureCollection",
+    "features": [
+    {
+    "type": "Feature",
+    "properties": {},
+    "geometry": {
+    "type": "LineString",
+    "coordinates": [
+    [103.681022, 1.347633],
+    [103.680762, 1.347528],
+    [103.680896, 1.347399],
+    [103.680928, 1.347340],
+    [103.680933, 1.347297]
+
+
+    ]
+    }
+    }
+    ]
+    }
Index: app/assets/trace.geojson
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/assets/trace.geojson	(date 1584607470059)
+++ app/assets/trace.geojson	(date 1584607470059)
@@ -0,0 +1,21 @@
+{
+    "type": "FeatureCollection",
+    "features": [
+    {
+    "type": "Feature",
+    "properties": {},
+    "geometry": {
+    "type": "LineString",
+    "coordinates": [
+    [103.681022, 1.347633],
+[103.680762, 1.347528],
+[103.680896, 1.347399],
+[103.680928, 1.347340],
+[103.680933, 1.347297]
+
+
+    ]
+    }
+    }
+    ]
+    }
Index: app/app.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/app.iml	(date 1585026297949)
+++ app/app.iml	(date 1585026297949)
@@ -103,32 +103,38 @@
     <orderEntry type="library" scope="TEST" name="Gradle: androidx.test.espresso:espresso-idling-resource:3.1.0-alpha3@aar" level="project" />
     <orderEntry type="library" name="Gradle: net.sf.marineapi:marineapi:0.10.0@jar" level="project" />
     <orderEntry type="library" name="Gradle: androidx.collection:collection:1.0.0@jar" level="project" />
-    <orderEntry type="library" name="Gradle: androidx.lifecycle:lifecycle-common:2.0.0@jar" level="project" />
     <orderEntry type="library" name="Gradle: androidx.arch.core:core-common:2.0.0@jar" level="project" />
+    <orderEntry type="library" name="Gradle: androidx.lifecycle:lifecycle-common:2.0.0@jar" level="project" />
     <orderEntry type="library" name="Gradle: androidx.annotation:annotation:1.0.0@jar" level="project" />
-    <orderEntry type="library" name="Gradle: com.squareup.okhttp3:okhttp:3.8.0@jar" level="project" />
-    <orderEntry type="library" name="Gradle: com.squareup.okio:okio:1.13.0@jar" level="project" />
-    <orderEntry type="library" name="Gradle: com.mapbox.mapboxsdk:mapbox-java-geojson:2.2.3@jar" level="project" />
-    <orderEntry type="library" name="Gradle: com.mapbox.mapboxsdk:mapbox-java-core:2.2.3@jar" level="project" />
-    <orderEntry type="library" name="Gradle: com.google.code.gson:gson:2.8.0@jar" level="project" />
+    <orderEntry type="library" name="Gradle: com.mapbox.mapboxsdk:mapbox-sdk-services:5.0.0@jar" level="project" />
+    <orderEntry type="library" name="Gradle: com.mapbox.mapboxsdk:mapbox-sdk-core:5.0.0@jar" level="project" />
+    <orderEntry type="library" name="Gradle: com.squareup.retrofit2:converter-gson:2.7.1@jar" level="project" />
+    <orderEntry type="library" name="Gradle: com.squareup.retrofit2:retrofit:2.7.1@jar" level="project" />
+    <orderEntry type="library" name="Gradle: com.squareup.okhttp3:logging-interceptor:3.12.7@jar" level="project" />
+    <orderEntry type="library" name="Gradle: com.squareup.okhttp3:okhttp:3.14.4@jar" level="project" />
+    <orderEntry type="library" name="Gradle: com.squareup.okio:okio:1.17.2@jar" level="project" />
+    <orderEntry type="library" name="Gradle: com.mapbox.mapboxsdk:mapbox-sdk-turf:5.0.0@jar" level="project" />
+    <orderEntry type="library" name="Gradle: com.mapbox.mapboxsdk:mapbox-sdk-geojson:5.0.0@jar" level="project" />
+    <orderEntry type="library" name="Gradle: com.google.code.gson:gson:2.8.6@jar" level="project" />
+    <orderEntry type="library" name="Gradle: org.jetbrains:annotations:16.0.1@jar" level="project" />
     <orderEntry type="library" name="Gradle: androidx.constraintlayout:constraintlayout-solver:1.1.3@jar" level="project" />
     <orderEntry type="library" name="Gradle: com.google.android.gms:play-services-location:15.0.1@aar" level="project" />
     <orderEntry type="library" name="Gradle: androidx.preference:preference:1.0.0@aar" level="project" />
-    <orderEntry type="library" name="Gradle: com.mapbox.mapboxsdk:mapbox-android-sdk:5.1.5@aar" level="project" />
+    <orderEntry type="library" name="Gradle: com.mapbox.mapboxsdk:mapbox-android-plugin-locationlayer:0.5.0@aar" level="project" />
+    <orderEntry type="library" name="Gradle: com.mapbox.mapboxsdk:mapbox-android-sdk:9.0.0@aar" level="project" />
     <orderEntry type="library" name="Gradle: com.elvishew:xlog:1.4.0@aar" level="project" />
     <orderEntry type="library" name="Gradle: com.google.android.gms:play-services-maps:15.0.1@aar" level="project" />
     <orderEntry type="library" name="Gradle: com.google.android.gms:play-services-base:15.0.1@aar" level="project" />
     <orderEntry type="library" name="Gradle: com.google.android.gms:play-services-places-placereport:15.0.1@aar" level="project" />
     <orderEntry type="library" name="Gradle: com.google.android.gms:play-services-tasks:15.0.1@aar" level="project" />
     <orderEntry type="library" name="Gradle: com.google.android.gms:play-services-basement:15.0.1@aar" level="project" />
-    <orderEntry type="library" name="Gradle: com.mapzen.android:lost:1.1.1@aar" level="project" />
     <orderEntry type="library" name="Gradle: androidx.legacy:legacy-support-v4:1.0.0@aar" level="project" />
-    <orderEntry type="library" name="Gradle: com.mapbox.mapboxsdk:mapbox-android-telemetry:2.2.3@aar" level="project" />
     <orderEntry type="library" name="Gradle: com.google.android.material:material:1.0.0@aar" level="project" />
     <orderEntry type="library" name="Gradle: androidx.appcompat:appcompat:1.0.0@aar" level="project" />
     <orderEntry type="library" name="Gradle: androidx.fragment:fragment:1.0.0@aar" level="project" />
     <orderEntry type="library" name="Gradle: androidx.recyclerview:recyclerview:1.0.0@aar" level="project" />
     <orderEntry type="library" name="Gradle: androidx.media:media:1.0.0@aar" level="project" />
+    <orderEntry type="library" name="Gradle: com.mapbox.mapboxsdk:mapbox-android-telemetry:4.7.1@aar" level="project" />
     <orderEntry type="library" name="Gradle: androidx.vectordrawable:vectordrawable-animated:1.0.0@aar" level="project" />
     <orderEntry type="library" name="Gradle: androidx.legacy:legacy-support-core-ui:1.0.0@aar" level="project" />
     <orderEntry type="library" name="Gradle: androidx.legacy:legacy-support-core-utils:1.0.0@aar" level="project" />
@@ -155,7 +161,10 @@
     <orderEntry type="library" name="Gradle: androidx.lifecycle:lifecycle-livedata:2.0.0@aar" level="project" />
     <orderEntry type="library" name="Gradle: androidx.lifecycle:lifecycle-livedata-core:2.0.0@aar" level="project" />
     <orderEntry type="library" name="Gradle: androidx.arch.core:core-runtime:2.0.0@aar" level="project" />
-    <orderEntry type="library" name="Gradle: com.jakewharton.timber:timber:4.5.1@aar" level="project" />
+    <orderEntry type="library" name="Gradle: com.mapbox.mapboxsdk:mapbox-android-core:1.4.1@aar" level="project" />
+    <orderEntry type="library" name="Gradle: com.mapbox.mapboxsdk:mapbox-android-gestures:0.6.0@aar" level="project" />
+    <orderEntry type="library" name="Gradle: com.mapbox.mapboxsdk:mapbox-android-accounts:0.7.0@aar" level="project" />
+    <orderEntry type="library" name="Gradle: com.jakewharton.timber:timber:4.7.1@aar" level="project" />
     <orderEntry type="library" name="Gradle: androidx.constraintlayout:constraintlayout:1.1.3@aar" level="project" />
     <orderEntry type="module" module-name="madlocationmanager" />
   </component>
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build.gradle	(date 1585026296746)
+++ app/build.gradle	(date 1585026296746)
@@ -37,7 +37,19 @@
     implementation "com.android.support:support-v4:26.1.0"
     implementation "com.android.support:appcompat-v7:26.1.0"
     implementation "com.android.support:support-annotations:23.1.1"
+    api 'com.google.android.gms:play-services-location:15.0.1'
+
 
+
+    //implement mapmatching
+//    implementation 'com.mapbox.mapboxsdk:mapbox-android-sdk:6.0.1'
+    implementation 'com.mapbox.mapboxsdk:mapbox-android-sdk:9.0.0'
+    implementation 'com.mapbox.mapboxsdk:mapbox-android-plugin-locationlayer:0.5.0'
+    implementation 'com.mapbox.mapboxsdk:mapbox-sdk-geojson:5.0.0'
+    implementation 'com.mapbox.mapboxsdk:mapbox-sdk-services:5.0.0'
+    implementation 'com.mapbox.mapboxsdk:mapbox-sdk-turf:5.0.0'
+    implementation 'com.mapbox.mapboxsdk:mapbox-sdk-core:5.0.0'
+    implementation 'com.jakewharton.timber:timber:4.7.1'
 
     api group: 'net.sf.marineapi', name: 'marineapi', version: '0.10.0'
     api 'com.google.android.gms:play-services-location:15.0.1'
@@ -45,8 +57,9 @@
     implementation 'com.google.android.gms:play-services-maps:15.0.1'
 
 
-    
+
 
+
     api('com.mapbox.mapboxsdk:mapbox-android-sdk:5.1.5@aar') {
         transitive = true
     }
